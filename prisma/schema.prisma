// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String     @id @default(uuid()) @db.Uuid
    name          String?
    username      String?    @unique
    email         String     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    users         BlogUser[]
    posts         Post[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

model Account {
    userId            String  @unique @map("user_id") @db.Uuid
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
    @@index([userId])
    @@map("accounts")
}

model Session {
    sessionToken String   @unique
    userId       String   @unique @map("user_id") @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
    @@map("verification_token")
}

model Blog {
    id        String     @id @default(uuid()) @db.Uuid
    title     String     @db.VarChar(45)
    subTitle  String     @map("sub_title") @db.VarChar(191)
    slug      String     @unique @db.VarChar(45)
    textColor String     @default("#FFFFFF") @map("text_color") @db.VarChar(45)
    bgColor   String     @default("#000000") @map("bg_color") @db.VarChar(45)
    isActive  Boolean    @default(true) @map("is_active") @db.Boolean
    createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime   @updatedAt @map("updated_at") @db.Timestamp
    deletedAt DateTime?  @map("delete_at") @db.Timestamp
    users     BlogUser[]
    posts     Post[]

    @@map("blogs")
}

enum Role {
    OWNER
    AUTHOR
    ADMIN
    EDITOR
}

model BlogUser {
    id        String   @id @default(uuid()) @db.Uuid
    role      Role     @default(AUTHOR)
    blog      Blog     @relation(fields: [blogId], references: [id])
    blogId    String   @unique @map("blog_id") @db.Uuid
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique @map("user_id") @db.Uuid
    isActive  Boolean  @default(true) @map("is_active") @db.Boolean
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

    @@map("blog_users")
}

model Post {
    id        String    @id @default(uuid()) @db.Uuid
    title     String    @db.VarChar(100)
    subTitle  String?   @map("sub_title") @db.VarChar(100)
    slug      String    @unique @db.VarChar(60)
    content   String    @db.Text
    isActive  Boolean   @default(true) @map("is_active") @db.Boolean
    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
    updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp
    deletedAt DateTime? @map("delete_at") @db.Timestamp

    blog   Blog   @relation(fields: [blogId], references: [id])
    blogId String @unique @map("blog_id") @db.Uuid
    user   User   @relation(fields: [userId], references: [id])
    userId String @unique @map("user_id") @db.Uuid

    @@map("blog_posts")
}
